"""Tests matrix_divided function"""

>>> matrix = __import__('2-matrix_divided')

>>> try:
...     matrix.matrix_divided(0, 1)
... except Exception as e:
...     print(e, type(e))
matrix must be a matrix (list of lists) of integers/floats <class 'TypeError'>

>>> try:
...     matrix.matrix_divided(0.0, 1)
... except Exception as e:
...     print(e, type(e))
matrix must be a matrix (list of lists) of integers/floats <class 'TypeError'>

>>> try:
...     matrix.matrix_divided([[]], 1)
... except Exception as e:
...     print(e, type(e))
matrix must be a matrix (list of lists) of integers/floats <class 'TypeError'>

>>> try:
...     matrix.matrix_divided([], 1)
... except Exception as e:
...     print(e, type(e))
matrix must be a matrix (list of lists) of integers/floats <class 'TypeError'>

>>> try:
...     matrix.matrix_divided({}, 1)
... except Exception as e:
...     print(e, type(e))
matrix must be a matrix (list of lists) of integers/floats <class 'TypeError'>

>>> try:
...     matrix.matrix_divided((), 1)
... except Exception as e:
...     print(e, type(e))
matrix must be a matrix (list of lists) of integers/floats <class 'TypeError'>

>>> try:
...     matrix.matrix_divided("", 1)
... except Exception as e:
...     print(e, type(e))
matrix must be a matrix (list of lists) of integers/floats <class 'TypeError'>

>>> try:
...     matrix.matrix_divided(set(), 1)
... except Exception as e:
...     print(e, type(e))
matrix must be a matrix (list of lists) of integers/floats <class 'TypeError'>

>>> try:
...     matrix.matrix_divided([{}], 1)
... except Exception as e:
...     print(e, type(e))
matrix must be a matrix (list of lists) of integers/floats <class 'TypeError'>

>>> try:
...     matrix.matrix_divided([{1, 2}, {4, 5}], 1)
... except Exception as e:
...     print(e, type(e))
matrix must be a matrix (list of lists) of integers/floats <class 'TypeError'>

>>> try:
...     matrix.matrix_divided([(1, 2), (3, 4)], 1)
... except Exception as e:
...     print(e, type(e))
matrix must be a matrix (list of lists) of integers/floats <class 'TypeError'>

>>> try:
...     matrix.matrix_divided([[1, 2], [3, '4']], 3)
... except Exception as e:
...     print(e, type(e))
matrix must be a matrix (list of lists) of integers/floats <class 'TypeError'>

>>> try:
...     matrix.matrix_divided([[1, 2], [3, [1]]], 3)
... except Exception as e:
...     print(e, type(e))
matrix must be a matrix (list of lists) of integers/floats <class 'TypeError'>

>>> try:
...     matrix.matrix_divided([[1, 2], [3, (1, )]], 3)
... except Exception as e:
...     print(e, type(e))
matrix must be a matrix (list of lists) of integers/floats <class 'TypeError'>

>>> try:
...     matrix.matrix_divided([[1, 2], [3, {1}]], 3)
... except Exception as e:
...     print(e, type(e))
matrix must be a matrix (list of lists) of integers/floats <class 'TypeError'>

>>> try:
...     matrix.matrix_divided([[1, 2], [3, {1: 1}]], 3)
... except Exception as e:
...     print(e, type(e))
matrix must be a matrix (list of lists) of integers/floats <class 'TypeError'>

>>> try:
...     matrix.matrix_divided([[1, 2]], 0)
... except Exception as e:
...     print(e, type(e))
division by zero <class 'ZeroDivisionError'>

>>> try:
...     matrix.matrix_divided([[0], [1, 2]], 1)
... except Exception as e:
...     print(e, type(e))
Each row of the matrix must have the same size <class 'TypeError'>

>>> try:
...     matrix.matrix_divided([[1, 2], [3, 4]], 'a')
... except Exception as e:
...     print(e, type(e))
div must be a number <class 'TypeError'>

>>> try:
...     matrix.matrix_divided([[1, 2], [3, 4]], [1])
... except Exception as e:
...     print(e, type(e))
div must be a number <class 'TypeError'>

>>> try:
...     matrix.matrix_divided([[1, 2], [3, 4]], (1, ))
... except Exception as e:
...     print(e, type(e))
div must be a number <class 'TypeError'>

>>> try:
...     matrix.matrix_divided([[1, 2], [3, 4]], {1})
... except Exception as e:
...     print(e, type(e))
div must be a number <class 'TypeError'>

>>> try:
...     matrix.matrix_divided([[1, 2], [3, 4]], {1: 1})
... except Exception as e:
...     print(e, type(e))
div must be a number <class 'TypeError'>

>>> matrix.matrix_divided([[2, 4]], 3)
[[0.67, 1.33]]

>>> matrix.matrix_divided([[4, 8]], 2)
[[2.0, 4.0]]

>>> matrix.matrix_divided([[3, 5], [7, 9]], 2)
[[1.5, 2.5], [3.5, 4.5]]

